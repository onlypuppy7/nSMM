versText="0.1.1"
platform.apilevel = '2.2'

--ui
--cursor=image.new(_R.IMG.cursor2)
--text_Ground=image.new(_R.IMG.ground)
--Rsmall_idle=image.new(_R.IMG.Rsmall_idle)
--Rsmall_walk1=image.new(_R.IMG.Rsmall_walk1)
--Rsmall_jump=image.new(_R.IMG.Rsmall_jump)
--Rsmall_drift=image.new(_R.IMG.Rsmall_drift)
--old api
--cursor=image.new(nil)
texture_Ground=image.new


--mario texture formatting: template,direction(L/R),powerStatus(0-2),animationSegment,starSegment(0-2)
--                             t            L               0               idle        --star1--
--                                                                                     (optional)
--i could make an image flipper but thats probably not worth it
--SMALL MARIO
tR0idle="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\1605\1605\1605\1605\196X\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\1605\1605\1605\1605\1605\1605\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\1605\1605\1605\1605\1605\1605\160\181\160\181\160\181d\242d\242\160\181d\242drdrdrdr\1605dr\1605\1605\160\181d\242\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdrdr\1605\1605\160\181d\242\160\181\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdr\1605\1605\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181\160\181drdrdrdr\1605\1605\1605\1605d\242d\242d\242d\242d\242d\242d\242\1605drdrdrdr\1605\1605\1605\160\181\160\181\196\216\160\181\160\181\160\181\1605\1605\1605\1605\1605\1605\1605\1605\1605\160\181\160\181\160\181\196\216\160\181\160\181\196\216\160\181\160\181\160\181\1605\1605\1605\1605\1605\160\181\160\181\160\181\160\181\196\216\196\216\196\216\196\216\160\181\160\181\160\181\160\181\1605\1605drdrd\242d\242\160\181\196\216d\242\196\216\196\216d\242\196\216\160\181d\242d\242drdrdrdrd\242d\242d\242\196\216\196\216\196\216\196\216\196\216\196\216d\242d\242d\242drdrdrdrd\242d\242\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216d\242d\242drdrdrdrdr\1605\196\216\196\216\196\216\196X\196X\196\216\196\216\196\216\1605drdrdr\1605\1605\1605\160\181\160\181\160\181\196X\255\127\255\127\196X\160\181\160\181\160\181\1605\1605\1605\1605\1605\160\181\160\181\160\181\160\181\255\127\255\127\255\127\255\127\160\181\160\181\160\181\160\181\1605\1605"
tR0walk1="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\1605\1605\1605\1605\196X\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\196X\196X\196X\1605\1605\1605\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\1605\1605\1605\1605\160\181\160\181\160\181d\242d\242\160\181d\242drdrdrdrdr\1605\1605\1605\160\181d\242\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdr\1605\1605\1605\160\181d\242\160\181\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdr\1605\1605\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181\160\181drdrdrdrdr\1605\1605\1605d\242d\242d\242d\242d\242d\242d\242\1605drdrdrdrdr\160\181\160\181\160\181\160\181\196\216\196\216\160\181\160\181\1605\1605drdrdrdrd\242d\242\160\181\160\181\160\181\160\181\196\216\196\216\196\216\160\181\160\181\160\181d\242d\242d\242drd\242d\242d\242\1605\160\181\160\181\196\216d\242\196\216\196\216\196\216\160\181\160\181d\242d\242drd\242d\242dr\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\1605\160\181drdrdrdr
tR0walk2="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\196X\196X\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\196X\196X\1605\196X\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\1605\1605\1605\1605\160\181\160\181\160\181d\242d\242\160\181d\242drdrdrdrdr\1605\1605\1605\160\181d\242\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdr\1605\1605\1605\160\181d\242\160\181\160\181d\242d\242d\242\160\181d\242d\242d\242drdr\1605\1605\1605\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181\160\181drdrdrdr\1605\1605\1605\1605d\242d\242d\242d\242d\242d\242d\242\1605drdrdrdr\1605\1605\1605\160\181\160\181\196\216\160\181\160\181\160\181\1605dr\1605drdrdrdr\1605\1605\160\181\160\181\160\181\160\181\196\216\196\216\160\181\160\181drdrdrdrdrdr\1605\1605\160\181\160\181\160\181\196\216\196\216d\242\196\216\196\216d\242drdrdrdrdr\1605\1605\160\181\160\181\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196X\196X\196Xdr\196X\196X\196X\196\216\160\181\160\181d\242d\242d\242\196\216\196\216\196\216\196X\196X\196X\1605\1605\196X\196X\196X\196\216\160\181d\242d\242\196\216\196\216\196\216\196X\196X\196X\196X\1605\1605\196X\196X\196X\196X\196\216\196\216\196\216\160\181\160\181\160\181\1605\1605\1605\1605\1605\1605\1605\1605\1605\1605\160\181\160\181\160\181\160\181\160\181\160\181\160\181\1605\1605\1605\1605\1605\1605\1605\1605\1605\160\181\160\181\160\181\160\181\1605\1605\1605\1605\1605\1605\1605"
tR0walk3="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\1605\1605\1605\196X\196X\196X\196X\196X\196X\196X\196X\1605\1605\1605\1605\1605\1605\1605\196X\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\196X\196X\1605\196X\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196Xdr\1605\1605\1605\1605\160\181\160\181\160\181d\242d\242\160\181d\242drdrdrdrdr\1605\1605\1605\160\181d\242\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdr\1605\1605\1605\160\181d\242\160\181\160\181d\242d\242d\242\160\181d\242d\242d\242dr\1605\1605\1605\1605\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181\160\181drdr\1605\1605\1605\1605\1605\1605d\242d\242d\242d\242d\242d\242d\242\1605drdrdrdrdrdrdr\160\181\160\181\160\181\160\181\196\216\160\181drd\242drdrdrdrdrdrdrd\242\160\181\160\181\160\181\160\181\160\181\160\181d\242d\242d\242drdrdrdrdrd\242d\242\196\216\160\181\160\181\160\181\160\181\160\181d\242d\242drdrdr\1605\1605\1605\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\196\216drdrdr\1605\1605\1605\1605\160\181\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\1605\1605\1605\160\181\160\181\196\216\196\216\196\216\1605\196\216\196\216\196\216\196X\196X\196X\1605\1605\1605\1605\160\181\1605\196X\196X\196X\160\181\160\181\160\181\1605\1605\1605\1605\1605\1605\1605\1605\1605\1605\196X\196X\1605\160\181\160\181\160\181\160\181\1605\1605\1605\1605\1605"
tR0jump="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\1605\1605\1605\196X\196X\196X\196X\196X\196X\196X\196X\196Xdrd\242d\242d\242\1605\1605\196X\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196X\196Xd\242d\242d\242\1605\1605\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216d\242d\242dr\1605\1605\1605\1605\160\181\160\181\160\181d\242d\242\160\181d\242dr\160\181\160\181\160\181dr\1605\1605\1605\160\181d\242\160\181d\242d\242d\242\160\181d\242d\242\160\181\160\181\160\181dr\1605\1605\1605\160\181d\242\160\181\160\181d\242d\242d\242\160\181d\242d\242d\242\160\181dr\1605\1605\1605\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181\160\181\160\181\1605dr\1605\1605\1605\1605\1605d\242d\242d\242d\242d\242d\242d\242\160\181\1605\1605dr\1605\160\181\160\181\160\181\160\181\160\181\196\216\160\181\160\181\160\181\196\216\160\181\1605\1605\1605dr\160\181\160\181\160\181\160\181\160\181\160\181\160\181\196\216\160\181\160\181\160\181\196\216\196X\1605\160\181d\242d\242\160\181\160\181\160\181\160\181\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196X\1605\160\181d\242d\242d\242\1605\196\216\196\216\160\181\196\216\196\216d\242\196\216\196\216d\242\196\216\160\181\160\181drd\242\1605\160\181\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\1605\1605\160\181\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\1605\160\181\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\1605\1605\1605\160\181\1605\1605\196\216\196\216\196\216\196\216\196X\196X\196Xdrdrdrdrdr"
tR0drift="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\1605dr\1605\1605\196X\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\196X\196X\1605drdr\1605\160\181\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\1605drdr\160\181\160\181\160\181\160\181\160\181\160\181d\242\160\181d\242drdrdrdrdrdrd\242d\242\160\181d\242d\242\160\181d\242d\242d\242d\242d\242d\242drdrdrdrd\242d\242\160\181d\242d\242\160\181\160\181d\242d\242\160\181\160\181d\242d\242drdrdrdrd\242d\242\160\181d\242d\242d\242d\242d\242d\242\160\181\160\181drdrdr\196X\196X\196X\196\216\196\216\196\216\160\181\160\181\160\181\196\216d\242d\242\1605\1605\1605\1605\196X\196X\196\216\196\216d\242d\242d\242\160\181\196\216\196\216\160\181\160\181\160\181\1605\1605\1605\196X\196X\196\216\160\181d\242d\242d\242\160\181\160\181\160\181\160\181\160\181\160\181\1605\1605dr\196X\196X\196\216\196\216\196\216d\242d\242\160\181\160\181\160\181\160\181\160\181\160\181\1605\1605dr\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\160\181\160\181\160\181\160\181\1605\1605drdr\1605\1605\196X\196\216\160\181\160\181\160\181\196\216\196\216\196\216\196\216\1605\1605\1605drdr\1605\1605\1605\1605\160\181\160\181\160\181\160\181\196\216\196\216\196\216\196X\196X\196Xdrdr\1605\160\181\1605\160\181\196\216\196\216\160\181\160\181\160\181\196\216\196X\196X\255\127\255\127\1605\1605\1605\160\181\160\181\160\181\160\181\160\181\196\216\1605\1605\196X\255\127\255\127\255\127\255\127\1605\1605\1605\1605\160\181\160\181\160\181\160\181\255\127\255\127\255\127\255\127\255\127\255\127\255\127\255\127\255\127\1605"
tR0death="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\1605\1605\1605\1605\1605\1605\196X\196X\196X\196X\1605\1605\1605\1605\1605\1605dr\1605\1605dr\1605\196X\196X\196X\196X\196X\196X\1605dr\1605\1605\1605drdrdrdr\1605\196X\196\216\196\216\196\216\196\216\196X\1605drdrdrdr\1605drdrd\242\1605\196\216\196\216\196\216\196\216\196\216\196\216\1605d\242drdrdrdrd\242d\242d\242\160\181d\242\160\181d\242d\242\160\181d\242\160\181d\242d\242d\242drdrd\242d\242\160\181\160\181d\242\160\181d\242d\242\160\181d\242\160\181\160\181d\242d\242drdrd\242d\242\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181d\242d\242drdrdrdr\160\181\160\181\160\181\160\181d\242d\242\160\181\160\181\160\181\160\181drdrdr\1605drdr\1605\160\181d\242\160\181\160\181\160\181\160\181d\242\160\181\1605drdrdr\1605\1605\1605\196X\160\181d\242d\242d\242d\242d\242d\242\160\181\196X\1605\1605\1605\1605\1605\1605\196\216\196\216\196\216d\242d\242d\242d\242\196\216\196\216\196\216\1605\1605\1605\1605\1605\160\181\160\181\196\216\196\216\160\181\160\181\160\181\160\181\196\216\196\216\160\181\160\181\1605\1605\1605\1605\160\181\160\181\160\181\196\216\196\216\160\181\160\181\196\216\196\216\160\181\160\181\160\181\1605\1605\1605\1605\160\181\160\181\160\181\196\216d\242\196\216\196\216d\242\196\216\160\181\160\181\160\181\1605\1605\1605\1605\160\181\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\160\181\1605\1605dr\1605\1605\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\1605\1605\1605"
tR0climb1="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\1605\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\1605\1605\1605\1605\1605\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\196X\1605\1605\1605\160\181\160\181\160\181d\242d\242\160\181d\242drdrdrdrdr\196X\1605\1605\160\181d\242\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdr\1605\1605\1605\160\181d\242\160\181\160\181d\242d\242d\242\160\181d\242d\242d\242drdr\1605\1605\1605\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181\160\181drdrdr\1605\1605\1605\1605\1605d\242d\242d\242d\242d\242d\242d\242\1605drdrdr\1605\1605\1605\1605\160\181\160\181\196\216\160\181\160\181\160\181\1605dr\1605drdrdrdr\196X\196X\196X\196\216\196\216\196\216\160\181\160\181\160\181\160\181\1605\1605drdrdrdr\196X\196X\196X\196\216\196\216\196\216\160\181\160\181\160\181\160\181\160\181\160\181d\242d\242drdr\196X\196X\196X\196\216\196\216\196\216\196\216\160\181\160\181\160\181\160\181\160\181d\242d\242d\242dr\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\160\181\160\181d\242d\242d\242dr\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\1605\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\1605\1605\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\1605\1605\1605\1605\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\196X\1605\1605\1605"
tR0climb2="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\196X\196X\196X\196X\196X\196X\196X\196X\196X\196X\196X\1605\1605\1605\1605\1605\196X\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\196X\1605\1605\1605\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\1605\1605\1605\1605\1605\160\181\160\181\160\181d\242d\242\160\181d\242drdrdrdrdrdr\1605\1605\160\181d\242\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdrdr\1605\1605\160\181d\242\160\181\160\181d\242d\242d\242\160\181d\242d\242d\242drdrdr\1605\1605\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181\160\181drdrdrdr\1605\1605\1605\1605d\242d\242d\242d\242d\242d\242d\242d\242drdrdrdr\196X\196X\196X\196X\196\216\196\216\160\181\160\181\160\181\160\181\160\181d\242d\242drdrdr\196X\196X\196X\196\216\196\216\160\181\160\181\160\181\160\181\160\181\160\181d\242d\242d\242drdr\196X\196X\196\216\196\216\196\216\160\181\160\181\160\181\160\181\160\181\160\181d\242d\242d\242drdr\196X\196X\196\216\196\216\196\216\196\216\196\216d\242\196\216\1605\1605drdr\1605\1605\1605\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196X\196X\196X\1605\160\181\1605\1605\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\1605\1605\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\1605\1605\196X\196X\196X\196X\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\1605\1605"
tL0drift="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\160\181d\242\160\181\160\181\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000d\242d\242d\242d\242d\242d\242\160\181d\242d\242\160\181d\242d\242\000\000\000\000\000\000d\242d\242\160\181\160\181d\242d\242\160\181\160\181d\242d\242\160\181d\242d\242\000\000\000\000\000\000\000\000\160\181\160\181d\242d\242d\242d\242d\242d\242\160\181d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242\196\216\160\181\160\181\160\181\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216\196\216\160\181d\242d\242d\242\196\216\196\216\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\160\181\160\181d\242d\242d\242\160\181\196\216\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\160\181\160\181d\242d
tL0idle="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\160\181d\242d\242\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242d\242d\242d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216\160\181\160\181\196\216\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\196\216\196\216\196\216\196\216\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000d\242d\242\160\181\196\216d\242\196\216\196\216d\242\196\216\160\181d\242d\242\000\000\000\000\000\000\000\000d\242d\242d\242\196\216\196\216\196\216\196\216\196\216\196\216d\242d\242d\242\000\000\000\000\000\000\000\000d\242d\242\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\000\000\000\000\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\000\000\000\000\000\000\000\000\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\000\000\000\000"
tL0walk1="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\160\181d\242d\242\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242d\242d\242d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\196\216\196\216\160\181\160\181\160\181\160\181\000\000\000\000\000\000d\242d\242d\242\160\181\160\181\160\181\196\216\196\216\196\216\160\181\160\181\160\181\160\181d\242d\242\000\000d\242d\242\160\181\160\181\196\216\196\216\196\216d\242\196\216\160\181\160\181\000\000d\242d\242d\242\000\000\000\000\160\181\000\000\000\000\196\216\196\216\196\216\196\216\196\216\196\216\196\216\000\000\000\000d\242d
tL0walk2="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\160\181d\242d\242\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242d\242d\242d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\196\216\196\216\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\196\216\196\216d\242\196\216\196\216\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216d\242d\242d\242\160\181\160\181\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216d\242d\242\160\181\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000"
tL0walk3="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\160\181d\242d\242\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242d\242d\242d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\000\000\160\181\196\216\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181\160\181\160\181\160\181\160\181\160\181d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242\160\181\160\181\160\181\160\181\160\181\196\216d\242d
tL0jump="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000d\242d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\000\000\000\000\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\000\000d\242\160\181d\242d\242\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181d\242d\242\160\181d\242d\242d\242\160\181d\242\160\181\000\000\000\000\000\000\000\000\160\181d\242d\242d\242\160\181d\242d\242d\242\160\181\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\160\181d\242d\242d\242d\242d\242d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\196\216\160\181\160\181\160\181\196\216\160\181\160\181\160\181\160\181\160\181\000\000\000\000\160\181\000\000\000\000\196\216\160\181\160\181\160\181\196\216\160\181\160\181\160\181\160\181\160\181\160\181\160\181\000\000\160\181\000\000\000\000\196\216\196\216\196\216\196\216\196\216\160\181\160\181\160\181\160\181\160\181\160\181d\242d\242\160\181\160\181\196\216d\242\196\216\196\216d\242\196\216\196\216\160\181\196\216\196\216\000\000d\242d\242d\242\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\000\000d\242\000\000\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\000\000\000\000\160\181\000\000"

tL0death="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\000\000\196\216\196\216\196\216\196\216\196\216\196\216\000\000d\242\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242\160\181d\242d\242\160\181d\242\160\181d\242d\242d\242\000\000\000\000d\242d\242\160\181\160\181d\242\160\181d\242d\242\160\181d\242\160\181\160\181d\242d\242\000\000\000\000d\242d\242\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\160\181d\242d\242\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181d\242d\242\160\181\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181d\242\160\181\160\181\160\181\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181d\242d\242d\242d\242d\242d\242\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216d\242d\242d\242d\242\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\160\181\160\181\196\216\196\216\160\181\160\181\160\181\160\181\196\216\196\216\160\181\160\181\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216\196\216\160\181\160\181\196\216\196\216\160\181\160\181\160\181\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216d\242\196\216\196\216d\242\196\216\160\181\160\181\160\181\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\160\181\160\181\196\216\196\216\196\216\196\216\196\216\196\216\160\181\160\181\000\000\000\000\000\000"
tL0climb1="\016\000\000\000\016\000\000\000\000\000\000\000 \000\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242\160\181d\242d\242\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242d\242d\242d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\196\216\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000d\242d\242\160\181\160\181\160\181\160\181\160\181\160\181\196\216\196\216\196\216\000\000\000\000\000\000\000\000d\242d\242d\242\160\181\160\181\160\181\160\181\160\181\196\216\196\216\196\216\196\216\000\000\000\000\000\000\000\000d\242d\242d
tL0climbd\242\160\181d\242d\242\160\181\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181d\242d\242d\242\160\181\160\181d\242\160\181\000\000\000\000\000\000\000\000\000\000\000\000\160\181\160\181\160\181\160\181d\242d\242d\242d\242\160\181\160\181\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242d\242d\242d\242d\242d\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242\160\181\160\181\160\181\160\181\160\181\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181\160\181\160\181\160\181\160\181\160\181\196\216\196\216\000\000\000\000\000\000\000\000\000\000d\242d\242d\242\160\181\160\181\160\181\160\181\160\181\160\181\196\216\196\216\196\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\216d

loadFrames={}
loadFrames[0]={"idle","walk1","walk2","walk3","jump","drift","death","climb1","climb2"}
print(loadFrames[0][1])


for i=0,1 do --Left,Right
    if i==0 then i="L" else i="R" end
    for i2=0,0 do --small,big,fire
        for i3=1,#loadFrames[i2] do --loadFrames index
            local frameForLoad=loadFrames[i2][i3]
            _G[i..i2..frameForLoad]=image.new(_G["t"..i..i2..frameForLoad])
            print("loaded","t"..i..i2..frameForLoad,"to var",i..i2..frameForLoad)
        end
    end
end


for i=0,2 do --star0,star1,star2 for big mario
end

level={}
mousePos={}
blockIndex={}

mario=class()
addBlock=class()

velocity2cycle=0
frameStor=0
storTime=0
fps=0
delta=0
framesPassed=0
detectTime=0
level["itr"]=0
mousePos.x=90
mousePos.y=90

arrowUp=0
arrowDown=0
arrowLeft=0
arrowRight=0

arrowUpInput=0
arrowDownInput=0
arrowLeftInput=0
arrowRightInput=0

arrowUpDelay=0
arrowDownDelay=0
arrowLeftDelay=0
arrowRightDelay=0

cameraOffset=0
mario.status=0

arrowLeftStor=0
arrowRightStor=0
arrowUpStor=0
arrowDownStor=0

-----------------------------------------------------------
-------------------------CLASSES---------------------------
-----------------------------------------------------------
function addBlock:init(id,name,solid,textureID) --textureID can also be a list, eg {1,1,1,1,2,3} for an animation sequence
    print(id,name,solid)
    self.id=id
    blockIndex[self.id]={["solid"]=solid,["name"]=name,["texture"]=textureID}
    --set default
    if blockIndex[self.id]["invisible"]== nil then      blockIndex[self.id]["invisible"]=false end    --doesnt render
    if blockIndex[self.id]["jumpThrough"]== nil then    blockIndex[self.id]["jumpThrough"]=false end  --semisolid
    if blockIndex[self.id]["containing"]== nil then     blockIndex[self.id]["containing"]=false end   --contains coins, powerup, vine or star
    if blockIndex[self.id]["bumpable"]== nil then       blockIndex[self.id]["bumpable"]=false end     --ie moves when hit (bricks, question marks)
    if blockIndex[self.id]["inFront"]== nil then       blockIndex[self.id]["inFront"]=false end       --drawn after mario and objects, useful for pipes and castle black void
end

function addBlock:attribute(property,val) --invisible, jumpThrough, containing, bumpable,
    blockIndex[self.id][property]=val
    print(blockIndex[self.id][property],blockIndex[self.id]["solid"])
end

-----------------------------------------------------------
-------------------------INDEX-----------------------------
-----------------------------------------------------------

--addBlock(id,name,solid,textureID)

addBlock(0,"Air",false,nil):attribute("invisible",true)
addBlock(1,"Ground",true,texture_Ground)


-----------------------------------------------------------
--------------------GENERAL-FUNCTIONS----------------------
-----------------------------------------------------------

function screenRefresh()
	return platform.window:invalidate()
end

function pww()
	return platform.window:width()
end

function pwh()
	return platform.window:height()
end

function drawPoint(myGC,vx, y)
	myGC:fillRect(x, y, 1, 1)
end

function drawCenteredString(myGC,str)
	myGC:drawString(str, (pww() - myGC:getStringWidth(str)) / 2, pwh() / 2, "middle")
end
                         
function drawXCenteredString(myGC,str,y)
	myGC:drawString(str, (pww() - myGC:getStringWidth(str)) / 2, y, "top")
end

function inRange(i, min, max)
    return i and (i >= min and i <= max)
end

function inRect(p, r)    --p=point={x,y}, r=rectangle={x,y,w,h}
    return (inRange(p[1],r[1],r[1]+r[3]) and inRange(p[2],r[2],r[2]+r[4]))
end

-- Collision detection function; --credit to Love2D
function CheckCollision(x1,y1,w1,h1, x2,y2,w2,h2) -- Returns true if two boxes overlap, false if they don't;
  return x1 < x2+w2 and
         x2 < x1+w1 and
         y1 < y2+h2 and
         y2 < y1+h1
end

function drawRectDotted(gc,x,y,w,h,thickness)
    if thickness==nil then thickness="thin" end
    gc:setPen("thin","dotted")
    gc:drawRect(x,y,w,h)
    gc:setPen("thin","smooth")
end

function drawRectDashed(gc,x,y,w,h,thickness)
    if thickness==nil then thickness="thin" end
    gc:setPen("thin","dashed")
    gc:drawRect(x,y,w,h)
    gc:setPen("thin","smooth")
end

function pol2binary(num)
    return ((num/math.abs(num))+1)/2
end
--------------------------
---------EVENTS-----------
--------------------------
function on.charIn(chr) --temporary dev features
    if chr=="1" then
        print(mario.pos.x%16)
    elseif chr=="2" then
        mario.velocity.y=400
    elseif chr=="3" then
        mario.velocity.x=5
        arrowUpInput=arrowUpInput+1
    elseif chr=="4" then
        arrowLeftInput=arrowLeftInput+1
    elseif chr=="6" then
        arrowRightInput=arrowRightInput+1
    elseif chr=="5" or chr==" " then
        arrowUpInput=arrowUpInput+1
    elseif chr=="7" then
        level["x"..pixel2plot(mario.pos.x-cameraOffset,mario.pos.y+16)[1].."y"..pixel2plot(mario.pos.x-cameraOffset,mario.pos.y+8)[2]]=1
    elseif chr=="8" then
        mario.pos.x=mario.pos.x-1
    elseif chr=="9" then
        mario.pos.x=mario.pos.x+1
    else playStage:reset()
    end
end

function on.timer()
    platform.window:invalidate() --refreshes screen
end

function on.escapeKey()
    playStage:generate()
    mario:resetPos()
end

function on.arrowRight()
    arrowRightInput=arrowRightInput+1 end
function on.arrowLeft()
    arrowLeftInput=arrowLeftInput+1 end
function on.arrowUp()
    arrowUpInput=arrowUpInput+1 end
function on.arrowDown()
    arrowDownInput=arrowDownInput+1 end

function on.mouseMove(x,y)
    mousePos.x=x
    mousePos.y=y
--    print(mousePos.x.." "..mousePos.y)
end

---------------------------
-----PROGRAM FUNCTIONS-----
---------------------------
function getID(searchX,searchY)
    local id=level["x"..searchX.."y"..searchY]
    if id==nil then id=-1 end --ID doesnt exist (out of bounds)
    return id
end

function pixel2plot(x,y,global) --returns co-ordinate of block from a screen pixel position
    local plotX
    if global then --doesnt take camera offset into account if true
        plotX=math.ceil((x)/16)
    else -- relative to the camera (DEFAULT)
        plotX=math.ceil((x+cameraOffset)/16)
    end
    local plotY=math.ceil((212-y)/16)
    local ID=getID(plotX,plotY)
    if ID<0 then ID=0 end --for random generation
    return {plotX,plotY,ID,blockIndex[ID]["solid"]} --[1] x [2] y
end

function fixcameraOffset()
    if mario.pos.x>96 then cameraOffset=mario.pos.x-96 end
    if mario.pos.x<96 then cameraOffset=0 end
end

---------------------------
---MARIO CLASS FUNCTIONS---
---------------------------
function mario:init()
    mario.velocity={}
    mario.pos={}
    self:resetPos()
end

function mario:calculateInput() --turns arrow inputs into velocity
--X movement
    if arrowLeft==1 or arrowRight==1 then
        if mario.velocity.x>5 then mario.velocity.x=5 elseif mario.velocity.x<-5 then mario.velocity.x=-5 end
        if arrowLeft==1 and mario.velocity.x>0.5 and mario.velocity.y==0 then mario.velocity.x=mario.velocity.x*(1-math.sin(mario.velocity.x/5)) --drifting slower
        elseif arrowRight==1 and mario.velocity.x<-0.5 and mario.velocity.y==0 then mario.velocity.x=mario.velocity.x*(1-math.sin(math.abs(mario.velocity.x)/5))
        else
            if math.abs(mario.velocity.x)<5 then --max running speed 5
                if math.abs(mario.velocity.x)<2.0 then --walking under 2.7
                mario.velocity.x=mario.velocity.x+arrowRight*(math.random(4,6)/10)
                mario.velocity.x=mario.velocity.x-arrowLeft*(math.random(4,6)/10)
                elseif math.abs(mario.velocity.x)<5 then
                mario.velocity.x=mario.velocity.x+arrowRight*math.random(1.3,1.5)
                mario.velocity.x=mario.velocity.x-arrowLeft*math.random(1.3,1.5) end
            end
        end
    else mario.velocity.x=mario.velocity.x*(0.8)
    end
    if math.abs(mario.velocity.x)<0.4 then mario.velocity.x=0 end --movement minumum, prevents velocity of 0.00001626 for example
--Y movement [TEMP CONTROL]
    if arrowUp==1 and not mario:gravityCheck(mario.pos.x,mario.pos.y,1) then  --up arrow pressed and on the floor (no double jumps)
        local runningBoost=0
        if math.abs(mario.velocity.x)>3 then runningBoost=math.abs(mario.velocity.x) end --momentum calculation
        mario.velocity.y=18+runningBoost --for a maximum of 23, jump 5 blocks. without boost is 4 blocks (idle)
    else mario.velocity.y=mario.velocity.y*0.745 end --slow down upwards velocity when jumping (lower is floatier)
    if math.abs(mario.velocity.y)<0.6 then mario.velocity.y=0 end --movement minumum, prevents velocity of 0.00001626 for example
end

function mario:calculateMove() --use velocity to update position
    local halfFrames=1 --this is completely useless and was a waste of time to code. it was supposed to allow for tighter jumps by calculating multiple increments per frame but does not do that
    for i=1,halfFrames do -- all this function is good for is lagging the game. i spent so long bugfixing the physics that out of spite i leave this and the vars in
    --X handling                      unless i decide to remove it later, which i probably will tbf
        if mario:aggregateCheckX(mario.pos.x,mario.pos.y,mario.velocity.x/halfFrames) then --no walls in X direction!
            mario.pos.x=mario.pos.x+mario.velocity.x/halfFrames --confirm movement
        else --wall detected
            mario.velocity.x=mario.velocity.x/3 --slow mario down so he can go closer to wall
            if mario:aggregateCheckX(mario.pos.x,mario.pos.y,mario.velocity.x/halfFrames) then 
                mario.pos.x=mario.pos.x+mario.velocity.x/halfFrames
            end --prevent unsmooth stuttering near wall
        end
    --Y handling
        if not mario:bumpCheck(mario.pos.x,mario.pos.y,-mario.velocity.y/halfFrames) and mario.velocity.y>0 then --jump too large
            mario.velocity.y=mario.velocity.y*0.69 end -- 0.69 is 15.9/23... not a meme :< but yhyh this reduces jump size 
        if not mario:bumpCheck(mario.pos.x,mario.pos.y,0) or not mario:bumpCheck(mario.pos.x,mario.pos.y,(-mario.velocity.y/halfFrames)/2) then --this shit "fixes" it, idk why but dont touch this
            mario.velocity.y=-0.6 end
        if mario:gravityCheck(mario.pos.x,mario.pos.y,0) and not (mario.velocity.y>0.1) then --gravity occurs!
            local tempVelocity=0
            if mario:gravityCheck(mario.pos.x,mario.pos.y,8/halfFrames) then --large distance between floor
                if mario.velocity.y>-7 then -- terminal velocity: -7
                    mario.velocity.y=mario.velocity.y-1.7/halfFrames
                else mario.velocity.y=-7 end
            else --small distance
                for i=-8,1 do
                    if mario:gravityCheck(mario.pos.x,mario.pos.y,math.abs(i)) then
                        tempVelocity=(i-1)/halfFrames
                        mario.velocity.y=0
                        break end end end
            mario.pos.y=mario.pos.y-(mario.velocity.y/halfFrames)-tempVelocity
        elseif mario.velocity.y>0.1 then
            mario.pos.y=mario.pos.y-(mario.velocity.y/halfFrames)
        end
        if not mario:gravityCheck(mario.pos.x,mario.pos.y,0) and mario.velocity.y==0 then --on ground, not jumping
        if arrowRight==1 then mario.dir="R"
        elseif arrowLeft==1 then mario.dir="L" end
    end end
end

function mario:draw(gc)
    mario:calculateInput()
    mario:calculateMove()
    mario:calculateDirection()
    gc:drawImage(_G[mario.dir.."0"..mario.status],mario.pos.x-cameraOffset,mario.pos.y) --draw..mario
end

function mario:calculateDirection()
    if mario.velocity.y==0 then
        if mario.velocity.x~=0 then
            velocity2cycle=0
            if (math.abs(mario.velocity.x))==5 then velocity2cycle = 1 elseif (math.abs(mario.velocity.x))>2 then velocity2cycle = 0.4 else velocity2cycle = 0.2 end
            print(velocity2cycle,mario.velocity.x)
            mario.status="walk"..math.floor((velocity2cycle*framesPassed)%3)+1 end
        if arrowLeft==1 and mario.velocity.x>0.1 then mario.status="drift" --drift animation if arrow key is going opposite way to velocity
        elseif arrowRight==1 and mario.velocity.x<0.1 then mario.status="drift" end
        if mario.velocity.x==0 then mario.status="idle" end
        else mario.status="jump"
    end
end

function mario:moveCheckX(xPos,yPos,xVel) --CHECKS FOR INTERFERENCE IN X AXIS returns true if nothing in the way
--X AXIS HANDLING
    --print(xPos,xVel)
    if xPos+xVel<0 then --edge of screen LEFT
        return false
    else --no edges of screen
        xPos=xPos+xVel --temp set to new pos
    end
    if pixel2plot(xPos+(xVel/16)-cameraOffset,yPos)[3]==1 then --check if new x pos in a wall
        return false
    else return true
    end
end
    
function mario:moveCheckY(xPos,yPos,yVel) --CHECKS FOR INTERFERENCE IN Y AXIS returns true if nothing in the way
--Y AXIS HANDLING
    if pixel2plot(xPos-cameraOffset,yPos+(yVel/16))[4] then --check if new y pos in a wall
        return false
    else return true
    end
end

function mario:aggregateCheckX(xPos,yPos,xVel,powerStatus) --checks points at head, feet, left, right
    if powerStatus==nil then powerStatus=0 end
    local topLeft=mario:moveCheckX(xPos+2,yPos+1,xVel) --more leniency
    local topRight=mario:moveCheckX(xPos+13,yPos+1,xVel) --more leniency, 14 pixel search
    local bottomLeft=mario:moveCheckX(xPos+2,yPos+15,xVel)
    local bottomRight=mario:moveCheckX(xPos+13,yPos+15,xVel)
    local powerLeft
    local powerRight----------------------------------------------------------------------------------------o_ <--powerLeft/Right, big mario calculated after (and hardcoded :<)
    if powerStatus>0 then powerLeft=mario:moveCheckX(xPos+2,yPos-16+1,xVel) else powerLeft=true end --------O                   (offset also needed when rendering)
    if powerStatus>0 then powerRight=mario:moveCheckX(xPos+13,yPos-16+1,xVel) else powerRight=true end-----@=@ <-- topLeft/Right, position always set as small mario height
    if topLeft and topRight and bottomLeft and bottomRight and powerLeft and powerRight then return true---/\  <--bottomLeft/Right
    else return false
    end
end

function mario:gravityCheck(xPos,yPos,yVel) --CHECKS IF STANDING ON BLOCK returns true if gravity applies
    local bottomLeft = mario:moveCheckY(xPos+2,yPos+16,16*yVel)
    local bottomRight = mario:moveCheckY(xPos+13,yPos+16,16*yVel)
    if bottomLeft and bottomRight then
        return true
    else return false
    end
end

function mario:bumpCheck(xPos,yPos,yVel,powerStatus) --CHECKS IF ABOUT TO COLLIDE WITH BLOCK returns true if bump applies
    if powerStatus==nil then powerStatus=0 end
    local topLeft = mario:moveCheckY(xPos+2,yPos,16*yVel) --easier to make tight jumps (has to be same as mario:gravityCheck or can climb walls) 
    local topRight = mario:moveCheckY(xPos+13,yPos,16*yVel)
    local powerLeft
    local powerRight
    if powerStatus>0 then powerLeft=mario:moveCheckY(xPos+5,yPos-11,16*yVel) powerRight=mario:moveCheckY(xPos+13,yPos-15,16*yVel)
    else powerLeft=true powerRight=true end
    if topLeft and topRight and powerLeft and powerRight then
        return true
    else return false
    end
end

function mario:resetPos()
    mario.dir="R"
    mario.pos.x=16 mario.pos.y=20
    mario.velocity.x=0 mario.velocity.y=0
    mario.status="idle"
    mario.power=0
end

mario=mario()
--------------------------
-----INGAME FUNCTIONS-----
--------------------------
playStage=class()

function playStage:handleInput()
    local delay=4 --mess of hardcoded shit, sorry
    
    arrowLeftDelay=arrowLeftDelay-1
    arrowRightDelay=arrowRightDelay-1
    
    if arrowUpInput>arrowUpStor then arrowUp=1 else arrowUp=0 end
    if arrowDownInput>arrowDownStor then arrowDown=1 else arrowDown=0 end
    if arrowLeftInput>arrowLeftStor then arrowLeft=1 arrowLeftDelay=delay else arrowLeft=0 end
    if arrowRightInput>arrowRightStor then arrowRight=1 arrowRightDelay=delay else arrowRight=0 end
    
    arrowLeftStor=arrowLeftInput
    arrowRightStor=arrowRightInput
    arrowUpStor=arrowUpInput
    arrowDownStor=arrowDownInput
    
    if arrowLeftDelay>0 then arrowLeft=1 end
    if arrowRightDelay>0 then arrowRight=1 end
end

function playStage:reset()
    playStage:randomise()
    cameraOffset=0
    mario:resetPos()
end

function playStage:randomise()
    for i=1,13 do --y axis
        for i2=0,50 do --x axis
            level["x"..i2.."y"..i]=math.random(-2,1)
        end
    end
    level["x2y12"]=0
end

function playStage:drawTerrain(gc)
    for i=1,13 do --rendered in rows from left to right - bottom to top
        for i2=math.ceil(cameraOffset/16),math.ceil((320+cameraOffset)/16) do --only draw what is visible on screen
            local blockID=getID(i2,i)
            if blockID<0 then blockID=0 end
            if blockIndex[blockID]["invisible"]==false then gc:drawImage(blockIndex[blockID]["texture"], ((i2-1)*16)-cameraOffset, 212-16*(i)) end
        end
    end
end

function playStage:generate()
    cameraOffset=0
    for i=1,13 do --y axis
        for i2=0,50 do --x axis
            level["x"..i2.."y"..i]=0 end end
    for i=1,2 do --y axis
        for i2=0,50 do --x axis
            level["x"..i2.."y"..i]=1 end end
    for i=3,4 do --y axis
        for i2=5,6 do --x axis
            level["x"..i2.."y"..i]=1 end end
    for i=3,5 do --y axis
        for i2=10,11 do --x axis
            level["x"..i2.."y"..i]=1 end end
    for i=3,6 do --y axis
        for i2=15,16 do --x axis
            level["x"..i2.."y"..i]=1 end end
    for i=3,7 do --y axis
        for i2=20,21 do --x axis
            level["x"..i2.."y"..i]=1 end end
    for i=4,4 do --y axis
        for i2=1,2 do --x axis
            level["x"..i2.."y"..i]=1 end end
    for i=7,7 do --y axis
        for i2=1,2 do --x axis
            level["x"..i2.."y"..i]=1 end end
    for i=4,13 do --y axis
        for i2=25,25 do --x axis
            level["x"..i2.."y"..i]=1 end end
    level["x2y12"]=0 level["x25y6"]=0
end

timer.start(0.01)
playStage:generate()
print("Running!",versText)

function on.paint(gc)
    gc:setColorRGB(97, 133, 248)
    gc:fillRect(0,0,320,218)
    gc:setColorRGB(255,255,100)
    --gc:drawImage(_G["wallpaper1"], 0, 0)
    playStage:handleInput()
    fixcameraOffset()
    playStage:drawTerrain(gc)
    framesPassed=framesPassed+1
    frameStor=frameStor+1
    mario:draw(gc)
    gc:drawString("FPS: "..fps.." Speed: "..delta.." cycle: "..velocity2cycle.." velX: "..mario.velocity.x.." velY: "..mario.velocity.y, 0, 17, top)
    
    local highlightedx=pixel2plot(mousePos.x,mousePos.y)[1]
    local highlightedy=pixel2plot(mousePos.x,mousePos.y)[2]
    gc:drawString("x"..highlightedx.." y"..highlightedy.." id:"..getID(highlightedx,highlightedy), 0, 32, top)
    gc:drawString("v"..versText, 0, 190+20, top)
    if timer.getMilliSecCounter()-storTime>1000 then
        detectTime=timer.getMilliSecCounter()-storTime
        fps=math.ceil(frameStor*(timer.getMilliSecCounter()-storTime)/1000)
        frameStor=0
        storTime=timer.getMilliSecCounter()
        delta=(math.ceil((20/fps)*100))/100
    end
    drawRectDashed(gc,mousePos.x,mousePos.y,1,1,thin)
    while True do end
end

