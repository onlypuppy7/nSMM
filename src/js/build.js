import {
    bundle
} from 'luabundle';
import luamin from 'luamin';
import fs from 'fs';
import path from 'path';

//oh no! this file is chatgpt generated!
//i cant be bothered to write it out

function bundleNSMM(name, luaFilePath) {
    let bundledLuaOG = bundle(luaFilePath, {
        paths: [luaDir + '/?.lua'],
    });

    console.log('Bundled Lua code length:', bundledLuaOG.length);

    function convertSpecialChars(luaCode) {
        for (let iter = 3; iter > 0; iter--) {
            const regex = new RegExp(`\\\\([0-9]{${iter}})[\\\\ A-z@%]`, 'g');

            luaCode = luaCode.replace(regex, (match, digits) => {
                const num = String(parseInt(digits, 10));
                return match.replace(digits, num);
            });
        };
        return luaCode;
    };

    let bundledLua = convertSpecialChars(convertSpecialChars(bundledLuaOG));

    console.log('Converted special characters in Lua code length:', bundledLua.length, (bundledLua.length / bundledLuaOG.length * 100).toFixed(2) + '% of original size');

    const minifiedLua =
        `--nSMM Bundle
    --Generated by nSMM Lua Bundler to reduce file size and improve loading performance
    --Full source available at https://github.com/onlypuppy7/nSMM
    ` +
        luamin.minify(bundledLua);

    console.log('Minified Lua code length:', minifiedLua.length, (minifiedLua.length / bundledLuaOG.length * 100).toFixed(2) + '% of original size');

    const outputBundleFilePath = path.resolve(`dist/${name}.build.lua`);
    const outputMinifiedFilePath = path.resolve(`dist/${name}.min.build.lua`);

    fs.mkdirSync(path.dirname(outputBundleFilePath), {
        recursive: true
    });

    fs.writeFileSync(outputBundleFilePath, bundledLua);
    fs.writeFileSync(outputMinifiedFilePath, minifiedLua);
    console.log('Bundled Lua code written to:', outputBundleFilePath);
    console.log('Minified Lua code written to:', outputMinifiedFilePath);
};

const luaDir = 'src/lua';

bundleNSMM('nSMM', path.resolve(luaDir + '/nsmm.lua'));
bundleNSMM('nSMM.debug', path.resolve(luaDir + '/nsmm-debug.lua'));

bundleNSMM('nSMMCourseWorld', path.resolve(luaDir + '/courseworld.lua'));
// bundleNSMM('nSMMCourseWorld.debug', path.resolve(luaDir+'/courseworld-debug.lua'));

// bundleNSMM('pc', path.resolve(luaDir+'/main.lua'));
bundleNSMM('ds', path.resolve(luaDir + '/ds.lua'));

let htmlFilePath = path.resolve('src/html');
let htmlDestinationPath = path.resolve('dist/html');

//delete old html files
fs.rmSync(htmlDestinationPath, {
    recursive: true,
    force: true
});

fs.mkdirSync(htmlDestinationPath, {
    recursive: true
});

//copy whole directory
fs.cpSync(htmlFilePath, htmlDestinationPath, {
    recursive: true,
    force: true
});
console.log('HTML files copied to:', htmlDestinationPath);

//bundle lua files into zip
import JSZip from 'jszip';

//why doesnt jszip have this built-in?
async function addFolderToZip(zip, folderPath, zipFolderPath = '') {
    const items = fs.readdirSync(folderPath);

    for (const item of items) {
        const fullPath = path.join(folderPath, item);
        const stats = fs.statSync(fullPath);

        if (stats.isDirectory()) {
            const folder = zip.folder(path.join(zipFolderPath, item));
            await addFolderToZip(folder, fullPath, '');
        } else {
            const content = fs.readFileSync(fullPath);
            zip.file(path.join(zipFolderPath, item), content);
        };
    };
};

async function zipDirectory(folderPath) {
    const zip = new JSZip();
    await addFolderToZip(zip, folderPath);
    return zip.generateAsync({
        type: 'nodebuffer'
    });
};

const zippedContent = await zipDirectory(luaDir);

//import crypto miner
import crypto from 'crypto';

//create hash for the zip file
const hash = crypto.createHash('sha256');
hash.update(zippedContent);
const zipHash = hash.digest('hex');
console.log('Zip file hash:', zipHash);

// Write zip to disk (optional)
const loveName = `nsmm_${zipHash}`;
const lovePath = path.join('dist', 'html', 'lovejs', loveName + ".love");
fs.mkdirSync(path.dirname(lovePath), {
    recursive: true
});
fs.writeFileSync(lovePath, zippedContent);

//edit index.html to include the zip file
const indexFilePath = path.join(htmlDestinationPath, 'lovejs', 'index.html');
let indexContent = fs.readFileSync(indexFilePath, 'utf-8');
indexContent = indexContent.replaceAll("NSMMHERE", loveName);
fs.writeFileSync(indexFilePath, indexContent);